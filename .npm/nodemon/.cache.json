{"_id":"nodemon","_rev":"145-06db1848f7a2e8bbc2fde200d4e74a1d","name":"nodemon","description":"Simple monitor script for use during development of a node.js app.","dist-tags":{"latest":"0.7.10","dev":"0.9.7"},"versions":{"0.1.4":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.1.4","main":"./nodemon","_id":"nodemon@0.1.4","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.1.4.tgz","shasum":"7ff4231d45049205b0f0d80359e3205f702ccfeb"},"directories":{}},"0.1.5":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.1.5","main":"./nodemon","_id":"nodemon@0.1.5","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.1.5.tgz","shasum":"71bc7d252c68b81def89ea4a6b3f278dea3dc6a7"},"directories":{}},"0.1.6":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.1.6","main":"./nodemon","_id":"nodemon@0.1.6","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.1.6.tgz","shasum":"94cefed291ce3092416c53aefc743afc3eee070d"},"directories":{}},"0.1.7":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.1.7","main":"./nodemon","_id":"nodemon@0.1.7","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.1.7.tgz","shasum":"db975089c2ff5cb087c02b9f0df4fdb39d754945"},"directories":{}},"0.1.8":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.1.8","main":"./nodemon","_id":"nodemon@0.1.8","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.1.8.tgz","shasum":"f2193e9ecae68e7bccd2d598ce479d72c9f0044c"},"directories":{}},"0.2.0":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.2.0","main":"./nodemon","_id":"nodemon@0.2.0","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.3.8-pre","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"cd5138da15391fbf60305791d61ecafae3bfaba4","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.2.0.tgz"}},"0.2.1":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.2.1","main":"./nodemon","_id":"nodemon@0.2.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.2.18","_nodeVersion":"v0.5.0-pre","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"c008feaed5fe47224f50a2414b2ca93584f4c316","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.2.1.tgz"}},"0.2.2":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.2.2","main":"./nodemon","_id":"nodemon@0.2.2","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.5.0-pre","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"2409de76a68223ddc79e340f65a13f286b86397e","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.2.2.tgz"}},"0.3.0":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.3.0","main":"./nodemon","_id":"nodemon@0.3.0","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.5.0-pre","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"e9946ffb91b466d6d1276d063a5fbab083124edc","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.3.0.tgz"}},"0.3.1":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.3.1","main":"./nodemon","_id":"nodemon@0.3.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.5.0-pre","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"9a5fe241c7d8041577ff162cbd1d3cef207bd4be","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.3.1.tgz"}},"0.3.2":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.3.2","main":"./nodemon","_id":"nodemon@0.3.2","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.5.0-pre","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"8ef1430debd6f1316d36b182c309d184c09e711c","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.3.2.tgz"}},"0.4.0":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.4.0","main":"./nodemon","dependencies":{},"devDependencies":{},"_id":"nodemon@0.4.0","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"8fbeb9430391eb71cb72d077b32c904e2cf6c045","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.4.0.tgz"},"scripts":{},"directories":{}},"0.4.1":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.4.1","preferGlobal":"true","main":"./nodemon","dependencies":{},"devDependencies":{},"_id":"nodemon@0.4.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"b6d7e6c040649b9e53fd413d2cacbf8cfb1cb183","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.4.1.tgz"},"scripts":{},"directories":{}},"0.5.0":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.5.0","preferGlobal":"true","main":"./nodemon","dependencies":{},"devDependencies":{},"_id":"nodemon@0.5.0","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"3bf47eb01518bdc2b756d1d8b01ba45a207e9657","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.5.0.tgz"},"scripts":{},"directories":{}},"0.5.1":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.5.1","preferGlobal":"true","main":"./nodemon","dependencies":{},"devDependencies":{},"_id":"nodemon@0.5.1","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"18edcfac90af3cd8ed53c06e6dd2081e07715347","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.5.1.tgz"},"scripts":{},"directories":{}},"0.5.2":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.5.2","preferGlobal":"true","main":"./nodemon","dependencies":{},"devDependencies":{},"_id":"nodemon@0.5.2","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.7","_defaultsLoaded":true,"dist":{"shasum":"21c43dba3ccc000501c3fff88288bf0f634ba539","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.5.2.tgz"},"scripts":{},"directories":{}},"0.5.3":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.5.3","preferGlobal":"true","main":"./nodemon","dependencies":{},"devDependencies":{},"_id":"nodemon@0.5.3","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"10baddf82ced6e3993d9aad3f0854b4dde57b922","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.5.3.tgz"},"scripts":{},"directories":{}},"0.5.4":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.5.4","preferGlobal":"true","main":"./nodemon","dependencies":{},"devDependencies":{},"_id":"nodemon@0.5.4","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"737946f008b9f3d0342902aa279642623bc7fcb6","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.5.4.tgz"},"scripts":{},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.5.5":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.5.5","preferGlobal":"true","main":"./nodemon","dependencies":{},"devDependencies":{},"_id":"nodemon@0.5.5","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"a796125f2e3128d7fbbfcb67efa3593302024129","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.5.5.tgz"},"scripts":{},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.5.6":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.5.6","preferGlobal":"true","main":"./nodemon","_npmJsonOpts":{"file":"/Users/remy/.npm/nodemon/0.5.6/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"nodemon@0.5.6","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"f0f59bf98d1da5ca885de44e870c4e419a0db76a","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.5.6.tgz"},"scripts":{},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.5.7":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.5.7","preferGlobal":"true","main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.5.7","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.103","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"19de72490fb0146ff78c67e46b86942128d13b24","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.5.7.tgz"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.0":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.0","preferGlobal":"true","dependencies":{"commander":"0.5.1"},"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.0","devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"d720355f46a40d17a7ad01e5f367b0afdd2b98f9","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.0.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\n`nodemon` will watch the files in the directory that `nodemon` was started, and if they change, it will automatically restart your node application.\n\n`nodemon` does **not** require *any* changes to your code or method of development. `nodemon` simply wraps your node application and keeps an eye on any files that have changed.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd `nodemon` will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as `nodemon` is a command line utility.\n\n# Usage\n\n`nodemon` wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\n`nodemon` also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, `nodemon` will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and `nodemon` will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\n`nodemon` was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, `nodemon` will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\n`nodemon` can also be used to execute and monitor other programs. `nodemon` will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon -exec python ./app.py\n\nNow nodemon will run `app.py` with python, and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default `nodemon` monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow `nodemon` will only restart if there are changes in the `./app` or `./libs` directory. By default `nodemon` will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So `nodemon` will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if `nodemon` will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent `nodemon` from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your `nodemon`, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.1":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.1","preferGlobal":"true","main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.1","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"492d81f1e42aa0aa17c1263d6203c45ef2ccb03b","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.1.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\n`nodemon` will watch the files in the directory that `nodemon` was started, and if they change, it will automatically restart your node application.\n\n`nodemon` does **not** require *any* changes to your code or method of development. `nodemon` simply wraps your node application and keeps an eye on any files that have changed.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd `nodemon` will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as `nodemon` is a command line utility.\n\n# Usage\n\n`nodemon` wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\n`nodemon` also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, `nodemon` will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and `nodemon` will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\n`nodemon` was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, `nodemon` will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\n`nodemon` can also be used to execute and monitor other programs. `nodemon` will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon -exec python ./app.py\n\nNow nodemon will run `app.py` with python, and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default `nodemon` monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow `nodemon` will only restart if there are changes in the `./app` or `./libs` directory. By default `nodemon` will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So `nodemon` will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if `nodemon` will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent `nodemon` from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your `nodemon`, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.2":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.2","preferGlobal":"true","main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.2","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"3e78cc84f1f48e6b21b4ae36be5ce2fcdf3756d6","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.2.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\n`nodemon` will watch the files in the directory that `nodemon` was started, and if they change, it will automatically restart your node application.\n\n`nodemon` does **not** require *any* changes to your code or method of development. `nodemon` simply wraps your node application and keeps an eye on any files that have changed.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd `nodemon` will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as `nodemon` is a command line utility.\n\n# Usage\n\n`nodemon` wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\n`nodemon` also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, `nodemon` will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and `nodemon` will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\n`nodemon` was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, `nodemon` will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\n`nodemon` can also be used to execute and monitor other programs. `nodemon` will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon -exec python ./app.py\n\nNow nodemon will run `app.py` with python, and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default `nodemon` monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow `nodemon` will only restart if there are changes in the `./app` or `./libs` directory. By default `nodemon` will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So `nodemon` will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if `nodemon` will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent `nodemon` from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your `nodemon`, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.3":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.3","preferGlobal":"true","main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.3","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"489ca1d69ef5ef1ae5c2d17d71551e10784b1048","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.3.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\n`nodemon` will watch the files in the directory that `nodemon` was started, and if they change, it will automatically restart your node application.\n\n`nodemon` does **not** require *any* changes to your code or method of development. `nodemon` simply wraps your node application and keeps an eye on any files that have changed.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd `nodemon` will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as `nodemon` is a command line utility.\n\n# Usage\n\n`nodemon` wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\n`nodemon` also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, `nodemon` will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and `nodemon` will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\n`nodemon` was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, `nodemon` will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\n`nodemon` can also be used to execute and monitor other programs. `nodemon` will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon -exec python ./app.py\n\nNow nodemon will run `app.py` with python, and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default `nodemon` monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow `nodemon` will only restart if there are changes in the `./app` or `./libs` directory. By default `nodemon` will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So `nodemon` will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if `nodemon` will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent `nodemon` from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your `nodemon`, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.4":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.4","preferGlobal":"true","main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.4","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"38d825b8be624c670ba676181d715ff97581bed9","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.4.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\n`nodemon` will watch the files in the directory that `nodemon` was started, and if they change, it will automatically restart your node application.\n\n`nodemon` does **not** require *any* changes to your code or method of development. `nodemon` simply wraps your node application and keeps an eye on any files that have changed. Remember that `nodemon` is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd `nodemon` will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as `nodemon` is a command line utility.\n\n# Usage\n\n`nodemon` wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\n`nodemon` also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, `nodemon` will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and `nodemon` will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\n`nodemon` was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, `nodemon` will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\n`nodemon` can also be used to execute and monitor other programs. `nodemon` will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon -exec python ./app.py\n\nNow nodemon will run `app.py` with python, and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default `nodemon` monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow `nodemon` will only restart if there are changes in the `./app` or `./libs` directory. By default `nodemon` will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So `nodemon` will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if `nodemon` will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent `nodemon` from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your `nodemon`, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.5":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.5","preferGlobal":"true","main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.5","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"b1da797a527ffba4d4c2f258597f64046f7b0d4c","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.5.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\n`nodemon` will watch the files in the directory that `nodemon` was started, and if they change, it will automatically restart your node application.\n\n`nodemon` does **not** require *any* changes to your code or method of development. `nodemon` simply wraps your node application and keeps an eye on any files that have changed. Remember that `nodemon` is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd `nodemon` will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as `nodemon` is a command line utility.\n\n# Usage\n\n`nodemon` wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\n`nodemon` also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, `nodemon` will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and `nodemon` will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\n`nodemon` was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, `nodemon` will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\n`nodemon` can also be used to execute and monitor other programs. `nodemon` will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon -exec python ./app.py\n\nNow nodemon will run `app.py` with python, and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default `nodemon` monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow `nodemon` will only restart if there are changes in the `./app` or `./libs` directory. By default `nodemon` will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So `nodemon` will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if `nodemon` will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent `nodemon` from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your `nodemon`, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\n`nodemon` sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by `nodemon` to restart), run the clean up process and then kill itself for `nodemon` to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.6":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.6","preferGlobal":"true","main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.6","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"e77d7e893e10dc8471f292257a1e72808ef55fc4","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.6.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.7":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.7","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.7","dependencies":{},"devDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-beta-10","_nodeVersion":"v0.6.7","_defaultsLoaded":true,"dist":{"shasum":"ddea0a572c7a0d08c063762530a0476ed0bf45d2","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.7.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.8":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.8","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.8","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"ed05be57e91dd7fc80875be832f42a3e43ccf0c0","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.8.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.9":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.9","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.9","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.10","_defaultsLoaded":true,"dist":{"shasum":"7547ff336d3ff1313344a890f3d13a378066ced2","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.9.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.10":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.10","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.10","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"0db2973ff19c090d055108f0cf1298f095b23410","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.10.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.11":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.11","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.11","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"e4352d1e8c262f5539f64c266c1b8c8322fa1cca","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.11.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.12":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.12","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.12","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"318dc2b2f4895c203c459aabb7dbc16dfe3c90e5","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.12.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.13":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.13","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.13","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"f861cbf5edac36f4183053034cb08703bfd76779","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.13.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.14":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.14","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.14","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"289b0ec3efab780e98ecbe55545d7111dbc695b5","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.14.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.15":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.15","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.15","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"f8ee1756f716526146ef2daa84a7819cfe286824","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.15.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.16":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.16","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.16","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"ce5adb2dddecca7acbd85755f6e5245ac3c3d70a","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.16.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.17":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.17","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.17","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"f0fdc9be6ee7e7cdb35c772b8f2bc835bff4592c","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.17.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.18":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.18","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.18","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"e3fe6cd4fe29acf135058cafd461dfbcf8a277fd","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.18.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.19":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.19","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.19","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"47f1ac009bb2c2a83819be11abe826734e978e9d","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.19.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's fs.watch. fs.watch will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, fs.watch may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.20":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.20","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.20","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"83a6a1d9ee999f5ea78f49c64edafa2f432812f4","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.20.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's fs.watch. fs.watch will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, fs.watch may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.21":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.21","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.21","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"c9ffb828abdb539e8a66ef594c0472316377f2af","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.21.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's fs.watch. fs.watch will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, fs.watch may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.22":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.22","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.22","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"5de0f9a026fbe79b6e46186dbf3b59aaea61f5e8","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.22.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's fs.watch. fs.watch will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, fs.watch may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.23":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.23","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.23","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.14","_defaultsLoaded":true,"dist":{"shasum":"465847752781d23acad854c200872f61726d9e42","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.23.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's fs.watch. fs.watch will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, fs.watch may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.0":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.0","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js` extension. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon --ext '.js|.css|.html'\n    \nOr with alternative syntax:\n\n    nodemon -e js,css,html\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's fs.watch. fs.watch will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, fs.watch may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","_id":"nodemon@0.7.0","dist":{"shasum":"5a599e80b18465323b620520cffe1d74ed5fab84","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.0.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.1":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.1","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js` extension. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon --ext '.js|.css|.html'\n    \nOr with alternative syntax:\n\n    nodemon -e js,css,html\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's fs.watch. fs.watch will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, fs.watch may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","_id":"nodemon@0.7.1","dist":{"shasum":"f774a11522cbf86e29987bcc723506b06dae73ff","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.1.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.2":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.2","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js` extension. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon --ext '.js|.css|.html'\n    \nOr with alternative syntax:\n\n    nodemon -e js,css,html\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's fs.watch. fs.watch will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, fs.watch may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","_id":"nodemon@0.7.2","dist":{"shasum":"7f15e7a88c669b872a7de46e76a42a88f677f184","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.2.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.3":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.3","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js` extension. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon --ext '.js|.css|.html'\n    \nOr with alternative syntax:\n\n    nodemon -e js,css,html\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's fs.watch. fs.watch will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, fs.watch may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","_id":"nodemon@0.7.3","dist":{"shasum":"03a655d59bdac52d79dc4de6dfb175f0a4e61e29","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.3.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.4":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.4","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js` extension. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon --ext '.js|.css|.html'\n    \nOr with alternative syntax:\n\n    nodemon -e js,css,html\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","_id":"nodemon@0.7.4","dist":{"shasum":"ddbd05b905a1b0b471ba64d259034e65b7fb68a4","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.4.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.5":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.5","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js` extension. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon --ext '.js|.css|.html'\n    \nOr with alternative syntax:\n\n    nodemon -e js,css,html\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","_id":"nodemon@0.7.5","dist":{"shasum":"a93d0a703e83b3803fba12b24caaded623968087","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.5.tgz"},"_npmVersion":"1.1.62","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.6":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.6","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js` extension. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon --ext '.js|.css|.html'\n    \nOr with alternative syntax:\n\n    nodemon -e js,css,html\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","_id":"nodemon@0.7.6","dist":{"shasum":"ae61bf93c129573e3a6870550f46e04fb0783f5a","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.6.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.7":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.7","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js` extension. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","_id":"nodemon@0.7.7","dist":{"shasum":"3f7de4a74ae4ffb5fe333aa749070ddfd8b1ccaa","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.7.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.8":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.8","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js` extension. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","_id":"nodemon@0.7.8","dist":{"shasum":"c0667a000f208dbf6a4dad08a5186595a9889590","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.8.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.7.10":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.7.10","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","scripts":{"test":"mocha --ui bdd --reporter spec  ./test/*.js"},"devDependencies":{"connect":"*","mocha":"~1.9.0","should":"~1.2.2"},"readme":"# nodemon\n\n[![Flattr this](http://api.flattr.com/button/flattr-badge-large.png)](http://flattr.com/thing/1211372/remynodemon-on-GitHub)\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n[![NPM version](https://badge.fury.io/js/nodemon.png)](http://badge.fury.io/js/nodemon)  \n[![Travis Status](https://travis-ci.org/remy/nodemon.png)](https://travis-ci.org/remy/nodemon)\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js`, `.coffee`, and `.litcoffee` extensions. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Using nodemon in your Grunt workflow\n\nCheck out the [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) plugin to integrate nodemon with the rest of your project's grunt workflow.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","_id":"nodemon@0.7.10","dist":{"shasum":"695a01b9458b115b03bbe01696d361bd50b4fb9b","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.7.10.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.9.0":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./bin/nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.9.0","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"://main":"./bin/nodemon.js","main":"./test/fixtures/app.js","scripts":{"test":"mocha --ui bdd --reporter spec test/**/*.test.js"},"devDependencies":{"connect":"*","mocha":"~1.12.0","should":"~1.2.2"},"dependencies":{"update-notifier":"~0.1.5","colors":"~0.6.1","object-mixin":"~0.2.1"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js`, `.coffee`, and `.litcoffee` extensions. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Using nodemon in your Grunt workflow\n\nCheck out the [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) plugin to integrate nodemon with the rest of your project's grunt workflow.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/remy/nodemon/issues"},"_id":"nodemon@0.9.0","dist":{"shasum":"1b08663616d635e437d5b7d54fd58f789ec74b82","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.9.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.9.1":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./bin/nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.9.1","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"://main":"./bin/nodemon.js","main":"./test/fixtures/app.js","scripts":{"test":"mocha --ui bdd --reporter spec test/**/*.test.js"},"devDependencies":{"connect":"*","mocha":"~1.12.0","should":"~1.2.2"},"dependencies":{"update-notifier":"~0.1.5","object-mixin":"~0.2.1"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js`, `.coffee`, and `.litcoffee` extensions. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Using nodemon in your Grunt workflow\n\nCheck out the [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) plugin to integrate nodemon with the rest of your project's grunt workflow.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/remy/nodemon/issues"},"_id":"nodemon@0.9.1","dist":{"shasum":"3d962acdda5d44681f76c4a46e36147d6e8c042f","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.9.1.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.9.2":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./bin/nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.9.2","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"://main":"./bin/nodemon.js","main":"./test/fixtures/app.js","scripts":{"test":"mocha --ui bdd --reporter spec test/**/*.test.js"},"devDependencies":{"connect":"*","mocha":"~1.12.0","should":"~1.2.2"},"dependencies":{"update-notifier":"~0.1.5","object-mixin":"~0.2.1"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js`, `.coffee`, and `.litcoffee` extensions. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Using nodemon in your Grunt workflow\n\nCheck out the [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) plugin to integrate nodemon with the rest of your project's grunt workflow.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/remy/nodemon/issues"},"_id":"nodemon@0.9.2","dist":{"shasum":"c19c576078462c6506badda1dec254695f2b2af7","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.9.2.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.9.3":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./bin/nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.9.3","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"://main":"./bin/nodemon.js","main":"./test/fixtures/app.js","scripts":{"test":"mocha --ui bdd --reporter spec test/**/*.test.js"},"devDependencies":{"connect":"*","mocha":"~1.12.0","should":"~1.2.2"},"dependencies":{"update-notifier":"~0.1.5"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js`, `.coffee`, and `.litcoffee` extensions. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Using nodemon in your Grunt workflow\n\nCheck out the [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) plugin to integrate nodemon with the rest of your project's grunt workflow.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/remy/nodemon/issues"},"_id":"nodemon@0.9.3","dist":{"shasum":"0586ad36ecf0e34fccccff0a874f9629f1a9d84a","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.9.3.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.9.5":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./bin/nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.9.5","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"://main":"./bin/nodemon.js","main":"./test/fixtures/app.js","scripts":{"test":"mocha --ui bdd --reporter spec test/**/*.test.js"},"devDependencies":{"connect":"*","mocha":"~1.12.0","should":"~1.2.2"},"dependencies":{"update-notifier":"~0.1.5"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js`, `.coffee`, and `.litcoffee` extensions. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Using nodemon in your Grunt workflow\n\nCheck out the [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) plugin to integrate nodemon with the rest of your project's grunt workflow.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/remy/nodemon/issues"},"_id":"nodemon@0.9.5","dist":{"shasum":"a46738c7bf69a1c556858f90aa53844152ef4978","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.9.5.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.9.6":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./bin/nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.9.6","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"://main":"./bin/nodemon.js","main":"./test/fixtures/app.js","scripts":{"test":"mocha --ui bdd --reporter spec test/**/*.test.js"},"devDependencies":{"connect":"*","mocha":"~1.12.0","should":"~1.2.2"},"dependencies":{"update-notifier":"~0.1.5"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js`, `.coffee`, and `.litcoffee` extensions. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Using nodemon in your Grunt workflow\n\nCheck out the [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) plugin to integrate nodemon with the rest of your project's grunt workflow.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/remy/nodemon/issues"},"_id":"nodemon@0.9.6","dist":{"shasum":"7a0b135b9b9c56e7a73025bbac8d6d3dc8dcd5c9","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.9.6.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.9.7":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./bin/nodemon.js"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.9.7","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],":main":"./lib/nodemon","main":"./test/fixtures/app.js","scripts":{"test":"istanbul cover _mocha -- --ui bdd --reporter spec test/**/*.test.js"},"devDependencies":{"connect":"*","mocha":"~1.12.0","should":"~1.2.2","istanbul":"~0.1.44","touch":"0.0.2"},"dependencies":{"update-notifier":"~0.1.5"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install -g nodemon\n\nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Manual restarting\n\nWhilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can simply type `rs` with a carridge return, and nodemon will restart your process.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Specifying extension watch list\n\nBy default, nodemon looks for files with the `.js`, `.coffee`, and `.litcoffee` extensions. If you use the `--exec` option and monitor `app.py` nodemon will monitor files with the extension of `.py`. However, you can specify your own list with the `-e` switch like so:\n\n    nodemon -e js,css,html\n\nOr with alternative syntax:\n\n    nodemon --ext '.js|.css|.html'\n\nNow nodemon will restart on any changes to files in the directory (or subdirectories) with the extensions .js, .css or .html.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n    :(\\d)*\\.js    # monitor javascript files with only digits in their name\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n* Unescaped regex's begining with `:`.\n\n**Note** the `.nodemonignore` file is read from the directory you run nodemon from, *not* from the location of the node script you're running.\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n# Using nodemon in your Grunt workflow\n\nCheck out the [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) plugin to integrate nodemon with the rest of your project's grunt workflow.\n\n# Help! My changes aren't being detected!\n\nnodemon has three potential methods it uses to look for file changes. First, it polls using the find command to search for files modified within the last second. This method works on systems with a BSD based find (Mac, for example). \n\nNext it tries using node's `fs.watch`. `fs.watch` will not always work however, and nodemon will try and detect if this is the case by writing a file to the tmp directory and seeing if fs.watch is triggered when it's removed. If nodemon finds that fs.watch was not triggered, it will then fall back to the third method (called legacy watch), which works by statting each file in your working directory looking for changes to the last modified time. This is the most cpu intensive method, but it may be the only option on some systems.\n\nIn certain cases, like when where you are working on a different drive than your tmp directory is on, `fs.watch` may give you a false positive. You can force nodemon to start using the most compatible legacy method by passing the -L switch, e.g. `nodemon -L /my/odd/file.js`.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/remy/nodemon/issues"},"_id":"nodemon@0.9.7","dist":{"shasum":"bfce004cf399d6785809addaabd6821e20805bd6","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.9.7.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}},"0.6.10-a":{"name":"nodemon","homepage":"http://github.com/remy/nodemon","author":{"name":"Remy Sharp","url":"http://github.com/remy"},"bin":{"nodemon":"./nodemon.js"},"repository":{"type":"git","url":"git://github.com/remy/nodemon.git"},"description":"Simple monitor script for use during development of a node.js app.","keywords":["monitor","development","restart","autoload","reload","terminal"],"version":"0.6.10-a","preferGlobal":"true","licenses":[{"type":"MIT","url":"http://rem.mit-license.org"}],"main":"./nodemon","_npmUser":{"name":"remy","email":"remy@remysharp.com"},"_id":"nodemon@0.6.10-a","dependencies":{},"devDependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"76aa417b4932fce7cba07785653aeb882beb0794","tarball":"http://registry.npmjs.org/nodemon/-/nodemon-0.6.10a.tgz"},"readme":"# nodemon\n\nFor use during development of a node.js based application. \n\nnodemon will watch the files in the directory that nodemon was started, and if they change, it will automatically restart your node application.\n\nnodemon does **not** require *any* changes to your code or method of development. nodemon simply wraps your node application and keeps an eye on any files that have changed. Remember that nodemon is a replacement wrapper for `node`, think of it as replacing the word \"node\" on the command line when you run your script.\n\n# Installation\n\nEither through forking or by using [npm](http://npmjs.org) (the recommended way):\n\n    npm install nodemon -g\n    \nAnd nodemon will be installed in to your bin path. Note that as of npm v1, you must explicitly tell npm to install globally as nodemon is a command line utility.\n\n# Usage\n\nnodemon wraps your application, so you can pass all the arguments you would normally pass to your app:\n\n    nodemon [your node app]\n\nFor example, if my application accepted a host and port as the arguments, I would start it as so:\n\n    nodemon ./server.js localhost 8080\n\nAny output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.\n\nnodemon also supports running and monitoring [coffee-script](http://jashkenas.github.com/coffee-script/) apps:\n\n    nodemon server.coffee\n\nIf no script is given, nodemon will test for a `package.json` file and if found, will run the file associated with the *main* property ([ref](https://github.com/remy/nodemon/issues/14)).\n\nYou can also pass the debug flag to node through the command line as you would normally:\n\n    nodemon --debug ./server.js 80\n\nIf you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app.\n\n# Automatic re-running\n\nnodemon was original written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.\n\n# Running non-node scripts\n\nnodemon can also be used to execute and monitor other programs. nodemon will read the file extension of the script being run and monitor that extension instead of .js if there's no .nodemonignore:\n\n    nodemon --exec \"python -v\" ./app.py\n\nNow nodemon will run `app.py` with python in verbose mode (note that if you're not passing args to the exec program, you don't need the quotes), and look for new or modified files with the `.py` extension.\n\n# Monitoring multiple directories\n\nBy default nodemon monitors the current working directory. If you want to take control of that option, use the `--watch` option to add specific paths:\n\n    nodemon --watch app --watch libs app/server.js\n\nNow nodemon will only restart if there are changes in the `./app` or `./libs` directory. By default nodemon will traverse sub-directories, so there's no need in explicitly including sub-directories.\n\n# Delaying restarting\n\nIn some situations, you may want to wait until a number of files have changed. The timeout before checking for new file changes is 1 second. If you're uploading a number of files and it's taking some number of seconds, this could cause your app to restart multiple time unnecessarily.\n\nTo add an extra throttle, or delay restarting, use the `--delay` command:\n\n    nodemon --delay 10 server.js\n\nThe delay figure is number of seconds to delay before restarting. So nodemon will only restart your app the given number of seconds after the *last* file change.\n\n# Ignoring files\n\nBy default, if nodemon will only restart when a `.js` JavaScript file changes.  In some cases you will want to ignore some specific files, directories or file patterns, to prevent nodemon from prematurely restarting your application.\n\nYou can use the [example ignore file](http://github.com/remy/nodemon/blob/master/nodemonignore.example) (note that this example file is not hidden - you must rename it to `.nodemonignore`) as a basis for your nodemon, but it's very simple to create your own:\n\n    # this is my ignore file with a nice comment at the top\n    \n    /vendor/*     # ignore all external submodules\n    /public/*     # static files\n    ./README.md   # a specific file\n    *.css         # ignore any CSS files too\n\nThe ignore file accepts:\n\n* Comments starting with a `#` symbol\n* Blank lines\n* Specific files\n* File patterns (this is converted to a regex, so you have full control of the pattern)\n\n# Controlling shutdown of your script\n\nnodemon sends a kill signal to your application when it sees a file update. If you need to clean up on shutdown inside your script you can capture the kill signal and handle it yourself.\n\nThe following example will listen once for the `SIGUSR2` signal (used by nodemon to restart), run the clean up process and then kill itself for nodemon to continue control:\n\n    process.once('SIGUSR2', function () {\n      gracefulShutdown(function () {\n        process.kill(process.pid, 'SIGUSR2'); \n      })\n    });\n\nNote that the `process.kill` is *only* called once your shutdown jobs are complete. Hat tip to [Benjie Gillam](http://www.benjiegillam.com/2011/08/node-js-clean-restart-and-faster-development-with-nodemon/) for writing technique this up.\n\n\n# Using nodemon with forever\n\nIf you're using nodemon with [forever](https://github.com/nodejitsu/forever) (perhaps in a production environment) you can combine the two together. This way if the script crashes, forever restarts the script, and if there are file changes, nodemon restarts your script. For more detail, see [issue 30](https://github.com/remy/nodemon/issues/30).\n\nTo acheive this you need to include the `--exitcrash` flag to ensure nodemon exits if the script crashes (or exits unexpectedly):\n\n    forever nodemon --exitcrash server.js\n\nTo test this, you can kill the server.js process and forever will restart it. If you `touch server.js` nodemon will restart it.\n\nNote that I *would not* recommend using nodemon in a production environment - but that's because I wouldn't want it restart without my explicit instruction.\n\n# License\n\nMIT [http://rem.mit-license.org](http://rem.mit-license.org)\n","maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"directories":{}}},"maintainers":[{"name":"remy","email":"remy@remysharp.com"}],"author":{"name":"Remy Sharp","url":"http://github.com/remy"},"repository":{"type":"git","url":"http://github.com/remy/nodemon.git"},"time":{"0.1.4":"2011-02-03T17:03:46.217Z","0.1.5":"2011-02-03T17:03:46.217Z","0.1.6":"2011-02-03T17:03:46.217Z","0.1.7":"2011-02-03T17:03:46.217Z","0.1.8":"2011-02-03T17:03:46.217Z","0.2.0":"2011-02-03T17:03:46.217Z","0.2.1":"2011-02-24T11:57:32.107Z","0.2.2":"2011-03-20T17:15:10.258Z","0.3.0":"2011-04-23T22:48:52.582Z","0.3.1":"2011-04-23T23:09:32.866Z","0.3.2":"2011-04-23T23:41:33.716Z","0.4.0":"2011-05-01T23:56:17.163Z","0.4.1":"2011-05-03T16:19:55.741Z","0.5.0":"2011-05-21T21:45:39.944Z","0.5.1":"2011-05-24T22:54:32.981Z","0.5.2":"2011-05-24T23:03:47.600Z","0.5.3":"2011-06-23T17:43:20.038Z","0.5.4":"2011-08-18T16:48:10.801Z","0.5.5":"2011-08-18T18:05:02.319Z","0.5.6":"2011-10-25T09:35:15.774Z","0.5.7":"2011-10-26T21:26:53.388Z","0.6.0":"2012-01-11T15:58:52.515Z","0.6.1":"2012-01-11T15:59:51.781Z","0.6.2":"2012-01-11T16:38:04.156Z","0.6.3":"2012-01-11T16:43:27.047Z","0.6.4":"2012-01-12T00:07:29.227Z","0.6.5":"2012-01-12T22:48:26.630Z","0.6.6":"2012-01-15T23:26:02.959Z","0.6.7":"2012-01-18T12:23:12.008Z","0.6.8":"2012-02-13T13:07:18.795Z","0.6.9":"2012-02-14T10:36:02.923Z","0.6.10":"2012-02-27T12:30:26.086Z","0.6.11":"2012-02-28T01:11:34.229Z","0.6.12":"2012-03-03T14:42:17.062Z","0.6.13":"2012-04-07T09:32:34.854Z","0.6.14":"2012-04-07T10:09:18.008Z","0.6.15":"2012-04-23T22:32:56.204Z","0.6.16":"2012-04-23T22:47:50.823Z","0.6.17":"2012-04-27T16:52:03.004Z","0.6.18":"2012-04-27T22:06:58.800Z","0.6.19":"2012-06-06T12:16:59.887Z","0.6.20":"2012-06-07T00:12:44.653Z","0.6.21":"2012-07-03T22:07:15.748Z","0.6.22":"2012-07-03T22:11:39.249Z","0.6.23":"2012-07-07T23:53:00.053Z","0.7.0":"2013-01-11T00:58:18.862Z","0.7.1":"2013-01-14T22:52:04.769Z","0.7.2":"2013-01-31T17:23:35.730Z","0.7.3":"2013-03-17T10:01:17.241Z","0.7.4":"2013-03-26T17:21:44.271Z","0.7.5":"2013-03-29T22:56:49.868Z","0.7.6":"2013-04-03T09:59:22.174Z","0.7.7":"2013-04-30T14:14:01.538Z","0.7.8":"2013-05-01T09:30:52.664Z","0.7.10":"2013-08-05T22:00:55.827Z","0.9.0":"2013-10-29T13:48:49.863Z","0.9.1":"2013-10-29T18:44:18.713Z","0.9.2":"2013-10-29T20:04:56.849Z","0.9.3":"2013-10-30T19:51:25.364Z","0.9.5":"2013-10-31T00:27:49.947Z","0.9.6":"2013-10-31T00:35:53.316Z","0.9.7":"2013-11-14T14:09:52.586Z","0.6.10-a":"2012-02-27T12:31:06.646Z"},"users":{"gillesruppert":true,"jswartwood":true,"travishorn":true,"m42am":true,"appsunited":true,"fiveisprime":true,"lexa":true,"maxmaximov":true,"chrisdickinson":true,"ianmcburnie":true,"frankblizzard":true,"denisix":true,"leesei":true},"_attachments":{"nodemon-0.9.7.tgz":{"content_type":"application/octet-stream","revpos":144,"digest":"md5-XpXbCycrEcB7B1K2Z+/Ysw==","length":83083,"stub":true},"nodemon-0.9.6.tgz":{"content_type":"application/octet-stream","revpos":142,"digest":"md5-2c7phvpqBIB7PC2nX3765A==","length":29623,"stub":true},"nodemon-0.9.5.tgz":{"content_type":"application/octet-stream","revpos":140,"digest":"md5-Hf/aXPTM2llfJ1OpPYgN9Q==","length":29560,"stub":true},"nodemon-0.9.3.tgz":{"content_type":"application/octet-stream","revpos":138,"digest":"md5-sZOMc/8LmcfQZkEs2V8kEA==","length":29130,"stub":true},"nodemon-0.9.2.tgz":{"content_type":"application/octet-stream","revpos":136,"digest":"md5-lC3RV9twq4Ri8GcUPHZMog==","length":28606,"stub":true},"nodemon-0.9.1.tgz":{"content_type":"application/octet-stream","revpos":134,"digest":"md5-9PvArjiWAJsADq+tKnQ8nA==","length":28428,"stub":true},"nodemon-0.9.0.tgz":{"content_type":"application/octet-stream","revpos":132,"digest":"md5-CUU+sHPbEw91NuqhVY1aWA==","length":627219,"stub":true},"nodemon-0.7.10.tgz":{"content_type":"application/octet-stream","revpos":127,"digest":"md5-lZvgzGApHbAeu2Tmlk7lTg==","length":611194,"stub":true},"nodemon-0.7.8.tgz":{"content_type":"application/octet-stream","revpos":124,"digest":"md5-75THWfkxLj9ftjFyE6p5jw==","length":12309,"stub":true},"nodemon-0.7.7.tgz":{"content_type":"application/octet-stream","revpos":122,"digest":"md5-e0KFtSw5xw5Y8ReVdkcuQw==","length":12279,"stub":true},"nodemon-0.7.6.tgz":{"content_type":"application/octet-stream","revpos":117,"digest":"md5-SHdtQVRSpmQyrKNTx6Jqkw==","length":12253,"stub":true},"nodemon-0.7.5.tgz":{"content_type":"application/octet-stream","revpos":116,"digest":"md5-OWR6CMLKSqC9bGItY2pp4w==","length":16537,"stub":true},"nodemon-0.7.4.tgz":{"content_type":"application/octet-stream","revpos":113,"digest":"md5-KNPTC5UqrHq/q4zbBxdjwg==","length":12250,"stub":true},"nodemon-0.7.3.tgz":{"content_type":"application/octet-stream","revpos":111,"digest":"md5-MKcyk4a1Rej3mIWWhlC6kw==","length":15232,"stub":true},"nodemon-0.7.2.tgz":{"content_type":"application/octet-stream","revpos":107,"digest":"md5-njHsw7ya8CboF2aR1oxzGg==","length":11442,"stub":true},"nodemon-0.7.1.tgz":{"content_type":"application/octet-stream","revpos":105,"digest":"md5-MJbesCzHbdMtQepr2CCpfA==","length":11433,"stub":true},"nodemon-0.7.0.tgz":{"content_type":"application/octet-stream","revpos":103,"digest":"md5-2lOXAcG2wyxOUvpIT2w2lQ==","length":11382,"stub":true},"nodemon-0.6.23.tgz":{"content_type":"application/octet-stream","revpos":96,"digest":"md5-DCEHvcAy3GoZB4Azlfc9YA==","length":10653,"stub":true},"nodemon-0.6.22.tgz":{"content_type":"application/octet-stream","revpos":94,"digest":"md5-m4DXzy5tz5xIhTCapSgpxA==","length":10647,"stub":true},"nodemon-0.6.21.tgz":{"content_type":"application/octet-stream","revpos":92,"digest":"md5-spz+ayvlQNYEIqZDr0UOvw==","length":10648,"stub":true},"nodemon-0.6.20.tgz":{"content_type":"application/octet-stream","revpos":90,"digest":"md5-54OZXQWcq81+L2w1OWKiIQ==","length":10687,"stub":true},"nodemon-0.6.19.tgz":{"content_type":"application/octet-stream","revpos":88,"digest":"md5-b7o0BH2Pz5J4UniJYY/q8g==","length":10668,"stub":true},"nodemon-0.6.18.tgz":{"content_type":"application/octet-stream","revpos":86,"digest":"md5-+GiNJxumwnWR68KIYY42RA==","length":8468,"stub":true},"nodemon-0.6.17.tgz":{"content_type":"application/octet-stream","revpos":84,"digest":"md5-6BNCJqmZ9sG0NNoX89svPw==","length":8473,"stub":true},"nodemon-0.6.16.tgz":{"content_type":"application/octet-stream","revpos":82,"digest":"md5-UkaJnjTqhvlOKue8N5eaYg==","length":8295,"stub":true},"nodemon-0.6.15.tgz":{"content_type":"application/octet-stream","revpos":80,"digest":"md5-Td8C595khLHrQSvTjmH0pw==","length":8298,"stub":true},"nodemon-0.6.14.tgz":{"content_type":"application/octet-stream","revpos":78,"digest":"md5-TWqUOw5E+OJM7+gmnxCBCw==","length":8121,"stub":true},"nodemon-0.6.13.tgz":{"content_type":"application/octet-stream","revpos":76,"digest":"md5-vSl0bsDyjdQF1k2Jfv4D+w==","length":8079,"stub":true},"nodemon-0.6.12.tgz":{"content_type":"application/octet-stream","revpos":74,"digest":"md5-H5ca4f0QWlSzAIITXM04LA==","length":8085,"stub":true},"nodemon-0.6.11.tgz":{"content_type":"application/octet-stream","revpos":72,"digest":"md5-ZRXR/ngf8CwRz+6LtswKdg==","length":8063,"stub":true},"nodemon-0.6.10a.tgz":{"content_type":"application/octet-stream","revpos":70,"digest":"md5-f1jKSImAfyl3NrQLA/+L+Q==","length":7655,"stub":true},"nodemon-0.6.10.tgz":{"content_type":"application/octet-stream","revpos":68,"digest":"md5-os93xlamJyq5BLtA1kPKaw==","length":7654,"stub":true},"nodemon-0.6.9.tgz":{"content_type":"application/octet-stream","revpos":66,"digest":"md5-4G0W+d6dyOVyycPUh8VrtA==","length":7670,"stub":true},"nodemon-0.6.8.tgz":{"content_type":"application/octet-stream","revpos":64,"digest":"md5-xE2PEyeronoxbBdhgMYSfQ==","length":7625,"stub":true},"nodemon-0.6.7.tgz":{"content_type":"application/octet-stream","revpos":62,"digest":"md5-fyR6sSwPXD6ir5CDwwkbiw==","length":7611,"stub":true},"nodemon-0.6.6.tgz":{"content_type":"application/octet-stream","revpos":60,"digest":"md5-4zcWZvzjkte50XCLknH+CA==","length":7541,"stub":true},"nodemon-0.6.5.tgz":{"content_type":"application/octet-stream","revpos":58,"digest":"md5-6x1KY2//0lQKtYrX9kAwyQ==","length":7180,"stub":true},"nodemon-0.6.4.tgz":{"content_type":"application/octet-stream","revpos":56,"digest":"md5-xYAWCXfJTiO3xiiIv4nabg==","length":6867,"stub":true},"nodemon-0.6.3.tgz":{"content_type":"application/octet-stream","revpos":54,"digest":"md5-rgIceKe6zOSoPAESGAu5kQ==","length":6724,"stub":true},"nodemon-0.6.2.tgz":{"content_type":"application/octet-stream","revpos":52,"digest":"md5-njm7lRoqazcNxFL9/P0Jpg==","length":6723,"stub":true},"nodemon-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":50,"digest":"md5-qqVaxz/l1c20rp1NkALCkQ==","length":6948,"stub":true},"nodemon-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":48,"digest":"md5-hgD/GF2tnKzmAgkNLNiO+A==","length":6973,"stub":true},"nodemon-0.5.7.tgz":{"content_type":"application/octet-stream","revpos":46,"digest":"md5-vTDhJxWUnPvMtPFKJm9JnQ==","length":10240,"stub":true},"nodemon-0.5.6.tgz":{"content_type":"application/octet-stream","revpos":44,"digest":"md5-ZMxWhFTNWzT4D81ZB2A0uQ==","length":5207,"stub":true},"nodemon-0.5.5.tgz":{"content_type":"application/octet-stream","revpos":42,"digest":"md5-eTjbCGE1J4gy4V+zEcRB8A==","length":5159,"stub":true},"nodemon-0.5.4.tgz":{"content_type":"application/octet-stream","revpos":40,"digest":"md5-SWh5n3rGoUOOqE8CbEyMsg==","length":5152,"stub":true},"nodemon-0.5.3.tgz":{"content_type":"application/octet-stream","revpos":38,"digest":"md5-vRMka4+B8pAPSiPH5vKZsQ==","length":5117,"stub":true},"nodemon-0.5.2.tgz":{"content_type":"application/octet-stream","revpos":36,"digest":"md5-yQjxJrDNRULq3UE9a2GncQ==","length":5086,"stub":true},"nodemon-0.5.1.tgz":{"content_type":"application/octet-stream","revpos":34,"digest":"md5-Vamm7apCnkAHflLEUJNoiA==","length":5085,"stub":true},"nodemon-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":32,"digest":"md5-jgeH8Xibfu4TMHf2xwEx3g==","length":5077,"stub":true},"nodemon-0.4.1.tgz":{"content_type":"application/octet-stream","revpos":30,"digest":"md5-lDLQCHUV4lmZ1OEChTO/mA==","length":4689,"stub":true},"nodemon-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":28,"digest":"md5-oD9l467yMIo3qTxEEnPYYQ==","length":4672,"stub":true},"nodemon-0.3.2.tgz":{"content_type":"application/octet-stream","revpos":26,"digest":"md5-i4UFZfreYAk/DGxRNu3q7Q==","length":3629,"stub":true},"nodemon-0.3.1.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-HmDDuEF1SLs4PG1imWD4tQ==","length":3564,"stub":true},"nodemon-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":22,"digest":"md5-zkdE3RM4UnGSyjuBDSMCRw==","length":3440,"stub":true},"nodemon-0.2.2.tgz":{"content_type":"application/octet-stream","revpos":20,"digest":"md5-vfvK1Jbu8iPbbSqXAW50DA==","length":3104,"stub":true},"nodemon-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":18,"digest":"md5-uTAEOyss7T3DnJ304czuzQ==","length":3300,"stub":true},"nodemon-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":16,"digest":"md5-1kDmqN4xkP/N4BUf3wRGQw==","length":3282,"stub":true},"nodemon-0.1.8.tgz":{"content_type":"application/octet-stream","revpos":11,"digest":"md5-5lCY4LQcbY4Q272b6yN+nA==","length":3728,"stub":true},"nodemon-0.1.7.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-urjtOhMmcWCJL/NhZQ0hnA==","length":3652,"stub":true},"nodemon-0.1.6.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-21AUvNRL+thZ0U4M6prYIg==","length":3370,"stub":true},"nodemon-0.1.5.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-kHAZw/tehFrqGMuXWzfw9w==","length":3363,"stub":true},"nodemon-0.1.4.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-5eoLBYmI/TYv3/B30pXZEw==","length":3205,"stub":true}},"_etag":"\"EUGTGAA7A5F7VBQKIP75VKLW6\""}